--- a/chrome/browser/ui/webui/settings/chromeos/cups_printers_handler.cc
+++ b/chrome/browser/ui/webui/settings/chromeos/cups_printers_handler.cc
@@ -524,6 +524,12 @@
   CHECK(args->GetDictionary(0, &printer_dict));
 
   Printer printer = DictToPrinter(*printer_dict);
+  PrinterUri uri;
+  if (!ParseUri(printer.uri(), &uri)) {
+    LOG(ERROR) << "Failed to parse printer";
+    OnAddPrinterError(PrinterSetupResult::kFatalError);
+    return;
+  }
 
   // Read PPD selection if it was used.
   std::string ppd_manufacturer;
--- a/components/offline_pages/core/offline_page_storage_manager.cc
+++ b/components/offline_pages/core/offline_page_storage_manager.cc
@@ -217,7 +217,7 @@
 
   // Report usages for all namespaces known to ClientPolicyController and only
   // for those.
-  std::string base_histogram_name = "OfflinePages.ClearStoragePreRunUsage.";
+  std::string base_histogram_name = "OfflinePages.ClearStoragePreRunUsage2.";
   for (const std::string name_space : policy_controller_->GetAllNamespaces()) {
     int size_in_kib = base::saturated_cast<int>(page_sizes[name_space] / 1024);
     base::UmaHistogramCustomCounts(base_histogram_name + name_space,
diff --git a/components/offline_pages/core/offline_page_storage_manager_unittest.cc b/components/offline_pages/core/offline_page_storage_manager_unittest.cc
index 1b979e2..e561222 100644
--- a/components/offline_pages/core/offline_page_storage_manager_unittest.cc
+++ b/components/offline_pages/core/offline_page_storage_manager_unittest.cc
@@ -281,7 +281,7 @@
 
 std::string OfflinePageStorageManagerTest::GetStorageUsageHistogramName(
     const std::string& name_space) {
-  return "OfflinePages.ClearStoragePreRunUsage." + name_space;
+  return "OfflinePages.ClearStoragePreRunUsage2." + name_space;
 }
 
 void OfflinePageStorageManagerTest::CheckTotalCountForAllStorageUsageHistograms(
--- a/remoting/host/host_attributes.cc
+++ b/remoting/host/host_attributes.cc
@@ -117,9 +117,9 @@
     }
   }
 
-  if (media::InitializeMediaFoundation() &&
-      media::MediaFoundationVideoEncodeAccelerator
-      ::PreSandboxInitialization()) {
+  if (media::MediaFoundationVideoEncodeAccelerator
+      ::PreSandboxInitialization() &&
+      media::InitializeMediaFoundation()) {
     result.push_back("HWEncoder");
   }
 #elif defined(OS_LINUX)
--- a/components/data_reduction_proxy/core/browser/data_reduction_proxy_delegate_unittest.cc
+++ b/components/data_reduction_proxy/core/browser/data_reduction_proxy_delegate_unittest.cc
@@ -762,37 +762,57 @@
 }
 
 TEST_F(DataReductionProxyDelegateTest, OnCompletedSizeFor200) {
-  base::HistogramTester histogram_tester;
-  int64_t baseline_received_bytes = total_received_bytes();
-  int64_t baseline_original_received_bytes = total_original_received_bytes();
-
-  const char kDrpResponseHeaders[] =
-      "HTTP/1.1 200 OK\r\n"
-      "Date: Wed, 28 Nov 2007 09:40:09 GMT\r\n"
-      "Warning: 199 Misc-Agent \"some warning text\"\r\n"
-      "Via:\r\n"
-      "Via: 1.1 Chrome-Compression-Proxy-Suffix, 9.9 other-proxy\r\n"
-      "Via: 2.2 Chrome-Compression-Proxy\r\n"
-      "Warning: 214 Chrome-Compression-Proxy \"Transformation Applied\"\r\n"
-      "X-Original-Content-Length: 10000\r\n"
-      "Chrome-Proxy: q=low\r\n"
-      "Content-Length: 1000\r\n\r\n";
+  const struct {
+    const std::string DrpResponseHeaders;
+  } test_cases[] = {
+      {
+          "HTTP/1.1 200 OK\r\n"
+          "Date: Wed, 28 Nov 2007 09:40:09 GMT\r\n"
+          "Warning: 199 Misc-Agent \"some warning text\"\r\n"
+          "Via:\r\n"
+          "Via: 1.1 Chrome-Compression-Proxy-Suffix, 9.9 other-proxy\r\n"
+          "Via: 2.2 Chrome-Compression-Proxy\r\n"
+          "Warning: 214 Chrome-Compression-Proxy \"Transformation Applied\"\r\n"
+          "X-Original-Content-Length: 10000\r\n"
+          "Chrome-Proxy: q=low\r\n"
+          "Content-Length: 1000\r\n\r\n",
+      },
+      {
+          "HTTP/1.1 200 OK\r\n"
+          "Date: Wed, 28 Nov 2007 09:40:09 GMT\r\n"
+          "Warning: 199 Misc-Agent \"some warning text\"\r\n"
+          "Via:\r\n"
+          "Via: 1.1 Chrome-Compression-Proxy-Suffix, 9.9 other-proxy\r\n"
+          "Via: 2.2 Chrome-Compression-Proxy\r\n"
+          "Warning: 214 Chrome-Compression-Proxy \"Transformation Applied\"\r\n"
+          "Chrome-Proxy: q=low,ofcl=10000\r\n"
+          "Content-Length: 1000\r\n\r\n",
+      }};
 
   params()->UseNonSecureProxiesForHttp();
-  std::unique_ptr<net::URLRequest> request = FetchURLRequest(
-      GURL("http://example.com/path/"), nullptr, kDrpResponseHeaders, 1000);
 
-  EXPECT_EQ(request->GetTotalReceivedBytes(),
-            total_received_bytes() - baseline_received_bytes);
+  for (const auto& test : test_cases) {
+    base::HistogramTester histogram_tester;
+    int64_t baseline_received_bytes = total_received_bytes();
+    int64_t baseline_original_received_bytes = total_original_received_bytes();
 
-  const std::string raw_headers = net::HttpUtil::AssembleRawHeaders(
-      kDrpResponseHeaders, arraysize(kDrpResponseHeaders) - 1);
-  EXPECT_EQ(static_cast<int64_t>(raw_headers.size() +
-                                 10000 /* original_response_body */),
-            total_original_received_bytes() - baseline_original_received_bytes);
+    std::unique_ptr<net::URLRequest> request =
+        FetchURLRequest(GURL("http://example.com/path/"), nullptr,
+                        test.DrpResponseHeaders.c_str(), 1000);
 
-  histogram_tester.ExpectUniqueSample(
-      "DataReductionProxy.ConfigService.HTTPRequests", 1, 1);
+    EXPECT_EQ(request->GetTotalReceivedBytes(),
+              total_received_bytes() - baseline_received_bytes);
+
+    const std::string raw_headers = net::HttpUtil::AssembleRawHeaders(
+        test.DrpResponseHeaders.c_str(), test.DrpResponseHeaders.size());
+    EXPECT_EQ(
+        static_cast<int64_t>(raw_headers.size() +
+                             10000 /* original_response_body */),
+        total_original_received_bytes() - baseline_original_received_bytes);
+
+    histogram_tester.ExpectUniqueSample(
+        "DataReductionProxy.ConfigService.HTTPRequests", 1, 1);
+  }
 }
 
 TEST_F(DataReductionProxyDelegateTest, TimeToFirstHttpDataSaverRequest) {
@@ -881,26 +901,39 @@
 }
 
 TEST_F(DataReductionProxyDelegateTest, OnCompletedSizeFor304) {
-  int64_t baseline_received_bytes = total_received_bytes();
-  int64_t baseline_original_received_bytes = total_original_received_bytes();
-
-  const char kDrpResponseHeaders[] =
-      "HTTP/1.1 304 Not Modified\r\n"
-      "Via: 1.1 Chrome-Compression-Proxy\r\n"
-      "X-Original-Content-Length: 10000\r\n\r\n";
+  const struct {
+    const std::string DrpResponseHeaders;
+  } test_cases[] = {{
+                        "HTTP/1.1 304 Not Modified\r\n"
+                        "Via: 1.1 Chrome-Compression-Proxy\r\n"
+                        "X-Original-Content-Length: 10000\r\n\r\n",
+                    },
+                    {
+                        "HTTP/1.1 304 Not Modified\r\n"
+                        "Via: 1.1 Chrome-Compression-Proxy\r\n"
+                        "Chrome-Proxy: ofcl=10000\r\n\r\n",
+                    }};
 
   params()->UseNonSecureProxiesForHttp();
-  std::unique_ptr<net::URLRequest> request = FetchURLRequest(
-      GURL("http://example.com/path/"), nullptr, kDrpResponseHeaders, 0);
 
-  EXPECT_EQ(request->GetTotalReceivedBytes(),
-            total_received_bytes() - baseline_received_bytes);
+  for (const auto& test : test_cases) {
+    int64_t baseline_received_bytes = total_received_bytes();
+    int64_t baseline_original_received_bytes = total_original_received_bytes();
 
-  const std::string raw_headers = net::HttpUtil::AssembleRawHeaders(
-      kDrpResponseHeaders, arraysize(kDrpResponseHeaders) - 1);
-  EXPECT_EQ(static_cast<int64_t>(raw_headers.size() +
-                                 10000 /* original_response_body */),
-            total_original_received_bytes() - baseline_original_received_bytes);
+    std::unique_ptr<net::URLRequest> request =
+        FetchURLRequest(GURL("http://example.com/path/"), nullptr,
+                        test.DrpResponseHeaders.c_str(), 0);
+
+    EXPECT_EQ(request->GetTotalReceivedBytes(),
+              total_received_bytes() - baseline_received_bytes);
+
+    const std::string raw_headers = net::HttpUtil::AssembleRawHeaders(
+        test.DrpResponseHeaders.c_str(), test.DrpResponseHeaders.size());
+    EXPECT_EQ(
+        static_cast<int64_t>(raw_headers.size() +
+                             10000 /* original_response_body */),
+        total_original_received_bytes() - baseline_original_received_bytes);
+  }
 }
 
 TEST_F(DataReductionProxyDelegateTest, OnCompletedSizeForWriteError) {
@@ -1014,6 +1047,18 @@
            base::Int64ToString((static_cast<int64_t>(1) << 60) * 3) +
            "\r\n\r\n",
        100, 300},
+      {"HTTP/1.1 206 Partial Content\r\n"
+       "Content-Range: bytes 0-19/40\r\n"
+       "Content-Length: 20\r\n"
+       "Via: 1.1 Chrome-Compression-Proxy\r\n"
+       "Chrome-Proxy: ofcl=160\r\n\r\n",
+       20, 80},
+      {"HTTP/1.1 206 Partial Content\r\n"
+       "Content-Range: bytes 0-9/40\r\n"
+       "Content-Length: 10\r\n"
+       "Via: 1.1 Chrome-Compression-Proxy\r\n"
+       "Chrome-Proxy: ofcl=160\r\n\r\n",
+       10, 40},
   };
 
   params()->UseNonSecureProxiesForHttp();
diff --git a/components/data_reduction_proxy/core/browser/data_reduction_proxy_network_delegate.cc b/components/data_reduction_proxy/core/browser/data_reduction_proxy_network_delegate.cc
index 9c778de..69d5d1a 100644
--- a/components/data_reduction_proxy/core/browser/data_reduction_proxy_network_delegate.cc
+++ b/components/data_reduction_proxy/core/browser/data_reduction_proxy_network_delegate.cc
@@ -125,8 +125,8 @@
                                    int64_t original_content_length,
                                    const base::TimeDelta& freshness_lifetime,
                                    DataReductionProxyRequestType request_type) {
-  // Add the current resource to these histograms only when a valid
-  // X-Original-Content-Length header is present.
+  // Add the current resource to these histograms only when the content length
+  // is valid.
   if (original_content_length >= 0) {
     UMA_HISTOGRAM_COUNTS_1M("Net.HttpContentLengthWithValidOCL",
                             received_content_length);
@@ -149,7 +149,7 @@
 
   } else {
     // Presume the original content length is the same as the received content
-    // length if the X-Original-Content-Header is not present.
+    // length.
     original_content_length = received_content_length;
   }
   UMA_HISTOGRAM_COUNTS_1M("Net.HttpContentLength", received_content_length);
@@ -542,16 +542,9 @@
   DataReductionProxyRequestType request_type = GetDataReductionProxyRequestType(
       *request, configurator_->GetProxyConfig(), *data_reduction_proxy_config_);
 
-  // Determine the original content length if present.
-  int64_t original_content_length =
-      request->response_headers()
-          ? request->response_headers()->GetInt64HeaderValue(
-                "x-original-content-length")
-          : -1;
-
   CalculateAndRecordDataUsage(*request, request_type);
-
-  RecordContentLength(*request, request_type, original_content_length);
+  RecordContentLength(*request, request_type,
+                      util::CalculateOCLFromOFCL(*request));
   RecordAcceptTransformReceivedUMA(*request);
 }
 
diff --git a/components/data_reduction_proxy/core/common/data_reduction_proxy_headers.cc b/components/data_reduction_proxy/core/common/data_reduction_proxy_headers.cc
index b9c2c6a..0daa7b6 100644
--- a/components/data_reduction_proxy/core/common/data_reduction_proxy_headers.cc
+++ b/components/data_reduction_proxy/core/common/data_reduction_proxy_headers.cc
@@ -520,4 +520,14 @@
   }
 }
 
+int64_t GetDataReductionProxyOFCL(const net::HttpResponseHeaders* headers) {
+  std::string ofcl_str;
+  int64_t ofcl;
+  if (GetDataReductionProxyActionValue(headers, "ofcl", &ofcl_str) &&
+      base::StringToInt64(ofcl_str, &ofcl) && ofcl >= 0) {
+    return ofcl;
+  }
+  return -1;
+}
+
 }  // namespace data_reduction_proxy
diff --git a/components/data_reduction_proxy/core/common/data_reduction_proxy_headers.h b/components/data_reduction_proxy/core/common/data_reduction_proxy_headers.h
index e7e855d..e8e07e3 100644
--- a/components/data_reduction_proxy/core/common/data_reduction_proxy_headers.h
+++ b/components/data_reduction_proxy/core/common/data_reduction_proxy_headers.h
@@ -209,5 +209,9 @@
     const net::HttpResponseHeaders* headers,
     std::vector<std::string>* values);
 
+// Returns the OFCL value in the Chrome-Proxy header. Returns -1 in case of
+// of error or if OFCL does not exist. |headers| must be non-null.
+int64_t GetDataReductionProxyOFCL(const net::HttpResponseHeaders* headers);
+
 }  // namespace data_reduction_proxy
 #endif  // COMPONENTS_DATA_REDUCTION_PROXY_CORE_COMMON_DATA_REDUCTION_PROXY_HEADERS_H_
diff --git a/components/data_reduction_proxy/core/common/data_reduction_proxy_util.cc b/components/data_reduction_proxy/core/common/data_reduction_proxy_util.cc
index a8b5857..788a033 100644
--- a/components/data_reduction_proxy/core/common/data_reduction_proxy_util.cc
+++ b/components/data_reduction_proxy/core/common/data_reduction_proxy_util.cc
@@ -9,11 +9,13 @@
 #include "base/strings/string_number_conversions.h"
 #include "base/time/time.h"
 #include "base/version.h"
+#include "components/data_reduction_proxy/core/common/data_reduction_proxy_headers.h"
 #include "components/data_reduction_proxy/core/common/lofi_decider.h"
 #include "components/data_reduction_proxy/core/common/version.h"
 #include "net/base/net_errors.h"
 #include "net/base/url_util.h"
 #include "net/http/http_response_headers.h"
+#include "net/http/http_status_code.h"
 #include "net/http/http_util.h"
 #include "net/proxy/proxy_config.h"
 #include "net/proxy/proxy_info.h"
@@ -179,12 +181,40 @@
   return !data_reduction_proxy_info->proxy_server().is_direct();
 }
 
+int64_t CalculateOCLFromOFCL(const net::URLRequest& request) {
+  const net::HttpResponseHeaders* response_headers = request.response_headers();
+  if (!response_headers)
+    return request.received_response_content_length();
+
+  int64_t original_content_length = GetDataReductionProxyOFCL(response_headers);
+
+  if (response_headers->response_code() == net::HTTP_PARTIAL_CONTENT) {
+    int64_t first, last, range_content_length;
+    if (response_headers->GetContentRangeFor206(&first, &last,
+                                                &range_content_length) &&
+        range_content_length > 0 && original_content_length > 0) {
+      // For a range request, OFCL indicates the original content length of the
+      // entire resource. The received response content length should be scaled
+      // by the compression ratio given by OFCL / range_content_length.
+      original_content_length =
+          ScaleByteCountByRatio(request.received_response_content_length(),
+                                original_content_length, range_content_length);
+    }
+  }
+  if (original_content_length < 0) {
+    // Fallback to using XOCL if getting from OFCL header fails.
+    // TODO(rajendrant): Remove the usage of OFCL, after integration tests are
+    // changed.
+    original_content_length =
+        response_headers->GetInt64HeaderValue("x-original-content-length");
+  }
+  return original_content_length;
+}
+
 int64_t CalculateEffectiveOCL(const net::URLRequest& request) {
   if (request.was_cached() || !request.response_headers())
     return request.received_response_content_length();
-  int64_t original_content_length_from_header =
-      request.response_headers()->GetInt64HeaderValue(
-          "x-original-content-length");
+  int64_t original_content_length_from_header = CalculateOCLFromOFCL(request);
 
   if (original_content_length_from_header < 0)
     return request.received_response_content_length();
diff --git a/components/data_reduction_proxy/core/common/data_reduction_proxy_util.h b/components/data_reduction_proxy/core/common/data_reduction_proxy_util.h
index 07784ef..a40f358 100644
--- a/components/data_reduction_proxy/core/common/data_reduction_proxy_util.h
+++ b/components/data_reduction_proxy/core/common/data_reduction_proxy_util.h
@@ -97,8 +97,16 @@
                                  const GURL& url,
                                  net::ProxyInfo* data_reduction_proxy_info);
 
-// Calculates the effective original content length of the |request|, accounting
-// for partial responses if necessary.
+// Calculates the original content length (OCL) of the |request|, from the OFCL
+// value in the Chrome-Proxy header. |request| must not be cached. This does not
+// account for partial failed responses.
+int64_t CalculateOCLFromOFCL(const net::URLRequest& request);
+
+// Calculates the effective original content length of the |request|. For
+// successful requests OCL will be obtained from OFCL if available or from
+// received response length. For partial failed responses an estimate is
+// provided by scaling received response length based on OFCL and Content-Length
+// header.
 int64_t CalculateEffectiveOCL(const net::URLRequest& request);
 
 // Given a |request| that went through the Data Reduction Proxy if |used_drp| is
--- a/net/quic/core/quic_client_promised_info.cc
+++ b/net/quic/core/quic_client_promised_info.cc
@@ -43,7 +43,11 @@
   // RFC7540, Section 8.2, requests MUST be safe [RFC7231], Section
   // 4.2.1.  GET and HEAD are the methods that are safe and required.
   SpdyHeaderBlock::const_iterator it = headers.find(kHttp2MethodHeader);
-  DCHECK(it != headers.end());
+  if (it == headers.end()) {
+    QUIC_DVLOG(1) << "Promise for stream " << id_ << " has no method";
+    Reset(QUIC_INVALID_PROMISE_METHOD);
+    return;
+  }
   if (!(it->second == "GET" || it->second == "HEAD")) {
     QUIC_DVLOG(1) << "Promise for stream " << id_ << " has invalid method "
                   << it->second;
diff --git a/net/quic/core/quic_client_promised_info_test.cc b/net/quic/core/quic_client_promised_info_test.cc
index 70d0ac6..9d5d758 100644
--- a/net/quic/core/quic_client_promised_info_test.cc
+++ b/net/quic/core/quic_client_promised_info_test.cc
@@ -154,6 +154,19 @@
   EXPECT_EQ(session_.GetPromisedByUrl(promise_url_), nullptr);
 }
 
+TEST_F(QuicClientPromisedInfoTest, PushPromiseMissingMethod) {
+  // Promise with a missing method
+  push_promise_.erase(":method");
+
+  EXPECT_CALL(*connection_,
+              SendRstStream(promise_id_, QUIC_INVALID_PROMISE_METHOD, 0));
+  ReceivePromise(promise_id_);
+
+  // Verify that the promise headers were ignored
+  EXPECT_EQ(session_.GetPromisedById(promise_id_), nullptr);
+  EXPECT_EQ(session_.GetPromisedByUrl(promise_url_), nullptr);
+}
+
 TEST_F(QuicClientPromisedInfoTest, PushPromiseInvalidUrl) {
   // Remove required header field to make URL invalid
   push_promise_.erase(":authority");
--- a/chrome/browser/ui/cocoa/content_settings/blocked_plugin_bubble_controller.mm
+++ b/chrome/browser/ui/cocoa/content_settings/blocked_plugin_bubble_controller.mm
@@ -45,7 +45,7 @@
   // The size of this bubble, and the other layout constants elsewhere in this
   // file, were lifted from ContentBlockedPlugins.xib
   base::scoped_nsobject<InfoBubbleWindow> window([[InfoBubbleWindow alloc]
-      initWithContentRect:NSMakeRect(0, 0, 314, 179)
+      initWithContentRect:NSMakeRect(0, 0, 314, 145)
                 styleMask:NSBorderlessWindowMask
                   backing:NSBackingStoreBuffered
                     defer:NO]);
--- a/chrome/browser/ui/app_list/arc/arc_app_list_prefs.cc
+++ b/chrome/browser/ui/app_list/arc/arc_app_list_prefs.cc
@@ -24,6 +24,7 @@
 #include "chrome/browser/ui/app_list/arc/arc_app_list_prefs_factory.h"
 #include "chrome/browser/ui/app_list/arc/arc_app_utils.h"
 #include "chrome/browser/ui/app_list/arc/arc_package_syncable_service.h"
+#include "chrome/browser/ui/app_list/arc/arc_pai_starter.h"
 #include "chrome/grit/generated_resources.h"
 #include "components/arc/arc_prefs.h"
 #include "components/arc/arc_service_manager.h"
@@ -58,7 +59,7 @@
 constexpr char kUninstalled[] = "uninstalled";
 
 constexpr base::TimeDelta kDetectDefaultAppAvailabilityTimeout =
-    base::TimeDelta::FromSeconds(15);
+    base::TimeDelta::FromMinutes(1);
 
 // Provider of write access to a dictionary storing ARC prefs.
 class ScopedArcPrefUpdate : public DictionaryPrefUpdate {
@@ -1073,8 +1074,19 @@
 
   if (!is_initialized_) {
     is_initialized_ = true;
-    MaybeSetDefaultAppLoadingTimeout();
+
     UMA_HISTOGRAM_COUNTS_1000("Arc.AppsInstalledAtStartup", ready_apps_.size());
+
+    arc::ArcPaiStarter* pai_starter =
+        arc::ArcSessionManager::Get()->pai_starter();
+
+    if (pai_starter) {
+      pai_starter->AddOnStartCallback(
+          base::BindOnce(&ArcAppListPrefs::MaybeSetDefaultAppLoadingTimeout,
+                         weak_ptr_factory_.GetWeakPtr()));
+    } else {
+      MaybeSetDefaultAppLoadingTimeout();
+    }
   }
 }
 
diff --git a/chrome/browser/ui/app_list/arc/arc_app_unittest.cc b/chrome/browser/ui/app_list/arc/arc_app_unittest.cc
index 23dc0f9..1ebe86d 100644
--- a/chrome/browser/ui/app_list/arc/arc_app_unittest.cc
+++ b/chrome/browser/ui/app_list/arc/arc_app_unittest.cc
@@ -166,6 +166,10 @@
     ArcState::ARC_PERSISTENT_PLAY_STORE_UNMANAGED,
 };
 
+void OnPaiStartedCallback(bool* started_flag) {
+  *started_flag = true;
+}
+
 }  // namespace
 
 class ArcAppModelBuilderTest : public extensions::ExtensionServiceTestBase,
@@ -1258,12 +1262,18 @@
   ArcAppListPrefs* prefs = ArcAppListPrefs::Get(profile_.get());
   ASSERT_TRUE(prefs);
 
+  bool pai_started = false;
+
   arc::ArcPaiStarter starter1(profile_.get(), profile_->GetPrefs());
   arc::ArcPaiStarter starter2(profile_.get(), profile_->GetPrefs());
   EXPECT_FALSE(starter1.started());
   EXPECT_FALSE(starter2.started());
   EXPECT_EQ(app_instance()->start_pai_request_count(), 0);
 
+  starter1.AddOnStartCallback(
+      base::BindOnce(&OnPaiStartedCallback, &pai_started));
+  EXPECT_FALSE(pai_started);
+
   arc::ArcSessionManager* session_manager = arc::ArcSessionManager::Get();
   ASSERT_TRUE(session_manager);
 
@@ -1281,6 +1291,14 @@
   SendPlayStoreApp();
 
   EXPECT_TRUE(starter1.started());
+  EXPECT_TRUE(pai_started);
+
+  // Test that callback is called immediately in case PAI was already started.
+  pai_started = false;
+  starter1.AddOnStartCallback(
+      base::BindOnce(&OnPaiStartedCallback, &pai_started));
+  EXPECT_TRUE(pai_started);
+
   EXPECT_FALSE(starter2.started());
   EXPECT_TRUE(session_manager->pai_starter()->started());
   EXPECT_EQ(app_instance()->start_pai_request_count(), 2);
@@ -1954,12 +1972,46 @@
   app_instance()->RefreshAppList();
   app_instance()->SendRefreshAppList(empty_app_list);
 
-  ValidateHaveApps(fake_default_apps());
+  std::vector<arc::mojom::AppInfo> expected_apps(fake_default_apps());
+  ValidateHaveApps(expected_apps);
+
+  if (GetParam() == ArcState::ARC_PERSISTENT_WITHOUT_PLAY_STORE) {
+    prefs->SimulateDefaultAppAvailabilityTimeoutForTesting();
+    ValidateHaveApps(std::vector<arc::mojom::AppInfo>());
+    return;
+  }
+
+  // PAI was not started and we should not have any active timer for default
+  // apps.
+  prefs->SimulateDefaultAppAvailabilityTimeoutForTesting();
+  ValidateHaveApps(expected_apps);
+
+  arc::ArcSessionManager* arc_session_manager = arc::ArcSessionManager::Get();
+  ASSERT_TRUE(arc_session_manager);
+
+  arc::ArcPaiStarter* pai_starter = arc_session_manager->pai_starter();
+  ASSERT_TRUE(pai_starter);
+
+  EXPECT_FALSE(pai_starter->started());
+
+  // Play store app triggers PAI.
+  arc::mojom::AppInfo app;
+  app.name = "Play Store";
+  app.package_name = arc::kPlayStorePackage;
+  app.activity = arc::kPlayStoreActivity;
+  app_instance()->RefreshAppList();
+
+  std::vector<arc::mojom::AppInfo> only_play_store({app});
+  app_instance()->SendRefreshAppList(only_play_store);
+  expected_apps.push_back(app);
+
+  // Timer was set to detect not available default apps.
+  ValidateHaveApps(expected_apps);
 
   prefs->SimulateDefaultAppAvailabilityTimeoutForTesting();
 
   // No default app installation and already installed packages.
-  ValidateHaveApps(empty_app_list);
+  ValidateHaveApps(only_play_store);
 }
 
 TEST_P(ArcDefaulAppTest, DefaultAppsInstallation) {
diff --git a/chrome/browser/ui/app_list/arc/arc_pai_starter.cc b/chrome/browser/ui/app_list/arc/arc_pai_starter.cc
index 289aa521..7e2d617e 100644
--- a/chrome/browser/ui/app_list/arc/arc_pai_starter.cc
+++ b/chrome/browser/ui/app_list/arc/arc_pai_starter.cc
@@ -52,6 +52,15 @@
   MaybeStartPai();
 }
 
+void ArcPaiStarter::AddOnStartCallback(base::OnceClosure callback) {
+  if (started_) {
+    std::move(callback).Run();
+    return;
+  }
+
+  onstart_callbacks_.push_back(std::move(callback));
+}
+
 void ArcPaiStarter::MaybeStartPai() {
   if (started_ || locked_)
     return;
@@ -71,6 +80,15 @@
   pref_service_->SetBoolean(prefs::kArcPaiStarted, true);
 
   prefs->RemoveObserver(this);
+
+  for (auto& callback : onstart_callbacks_)
+    std::move(callback).Run();
+  onstart_callbacks_.clear();
+}
+
+void ArcPaiStarter::OnAppRegistered(const std::string& app_id,
+                                    const ArcAppListPrefs::AppInfo& app_info) {
+  OnAppReadyChanged(app_id, app_info.ready);
 }
 
 void ArcPaiStarter::OnAppReadyChanged(const std::string& app_id, bool ready) {
diff --git a/chrome/browser/ui/app_list/arc/arc_pai_starter.h b/chrome/browser/ui/app_list/arc/arc_pai_starter.h
index db4973d..b168986 100644
--- a/chrome/browser/ui/app_list/arc/arc_pai_starter.h
+++ b/chrome/browser/ui/app_list/arc/arc_pai_starter.h
@@ -5,6 +5,9 @@
 #ifndef CHROME_BROWSER_UI_APP_LIST_ARC_ARC_PAI_STARTER_H_
 #define CHROME_BROWSER_UI_APP_LIST_ARC_ARC_PAI_STARTER_H_
 
+#include <vector>
+
+#include "base/callback.h"
 #include "base/macros.h"
 #include "chrome/browser/ui/app_list/arc/arc_app_list_prefs.h"
 
@@ -36,6 +39,10 @@
   // is ready at this moment then PAI is started immediately.
   void ReleaseLock();
 
+  // Registers callback that is called once PAI has been started. If PAI is
+  // started already then callback is called immediately.
+  void AddOnStartCallback(base::OnceClosure callback);
+
   // Returns true if lock was acquired.
   bool locked() const { return locked_; }
 
@@ -45,10 +52,13 @@
   void MaybeStartPai();
 
   // ArcAppListPrefs::Observer:
+  void OnAppRegistered(const std::string& app_id,
+                       const ArcAppListPrefs::AppInfo& app_info) override;
   void OnAppReadyChanged(const std::string& app_id, bool ready) override;
 
   content::BrowserContext* const context_;
   PrefService* const pref_service_;
+  std::vector<base::OnceClosure> onstart_callbacks_;
   bool locked_ = false;
   bool started_ = false;
 
