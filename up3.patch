--- a/base/message_loop/message_loop.cc
+++ b/base/message_loop/message_loop.cc
@@ -238,11 +238,11 @@
     // loop that does not go through RunLoop::Run().
     pump_->ScheduleWork();
   }
-  nestable_tasks_allowed_ = allowed;
+  task_execution_allowed_ = allowed;
 }
 
 bool MessageLoop::NestableTasksAllowed() const {
-  return nestable_tasks_allowed_ || run_loop_client_->ProcessingTasksAllowed();
+  return task_execution_allowed_;
 }
 
 // TODO(gab): Migrate TaskObservers to RunLoop as part of separating concerns
@@ -277,17 +277,11 @@
 
 MessageLoop::MessageLoop(Type type, MessagePumpFactoryCallback pump_factory)
     : type_(type),
-#if defined(OS_WIN)
-      in_high_res_mode_(false),
-#endif
-      nestable_tasks_allowed_(true),
       pump_factory_(std::move(pump_factory)),
-      current_pending_task_(nullptr),
       incoming_task_queue_(new internal::IncomingTaskQueue(this)),
       unbound_task_runner_(
           new internal::MessageLoopTaskRunner(incoming_task_queue_)),
-      task_runner_(unbound_task_runner_),
-      thread_id_(kInvalidThreadId) {
+      task_runner_(unbound_task_runner_) {
   // If type is TYPE_CUSTOM non-null pump_factory must be given.
   DCHECK(type_ != TYPE_CUSTOM || !pump_factory_.is_null());
 }
@@ -339,9 +333,17 @@
   thread_task_runner_handle_.reset();
 }
 
-void MessageLoop::Run() {
+void MessageLoop::Run(bool application_tasks_allowed) {
   DCHECK_EQ(this, current());
-  pump_->Run(this);
+  if (application_tasks_allowed && !task_execution_allowed_) {
+    // Allow nested task execution as explicitly requested.
+    DCHECK(run_loop_client_->IsNested());
+    task_execution_allowed_ = true;
+    pump_->Run(this);
+    task_execution_allowed_ = false;
+  } else {
+    pump_->Run(this);
+  }
 }
 
 void MessageLoop::Quit() {
@@ -379,11 +381,11 @@
 }
 
 void MessageLoop::RunTask(PendingTask* pending_task) {
-  DCHECK(NestableTasksAllowed());
+  DCHECK(task_execution_allowed_);
   current_pending_task_ = pending_task;
 
   // Execute the task and assume the worst: It is probably not reentrant.
-  nestable_tasks_allowed_ = false;
+  task_execution_allowed_ = false;
 
   TRACE_TASK_EXECUTION("MessageLoop::RunTask", *pending_task);
 
@@ -393,7 +395,7 @@
   for (auto& observer : task_observers_)
     observer.DidProcessTask(*pending_task);
 
-  nestable_tasks_allowed_ = true;
+  task_execution_allowed_ = true;
 
   current_pending_task_ = nullptr;
 }
@@ -427,10 +429,8 @@
 }
 
 bool MessageLoop::DoWork() {
-  if (!NestableTasksAllowed()) {
-    // Task can't be executed right now.
+  if (!task_execution_allowed_)
     return false;
-  }
 
   // Execute oldest task.
   while (incoming_task_queue_->triage_tasks().HasTasks()) {
@@ -457,7 +457,7 @@
 }
 
 bool MessageLoop::DoDelayedWork(TimeTicks* next_delayed_work_time) {
-  if (!NestableTasksAllowed() ||
+  if (!task_execution_allowed_ ||
       !incoming_task_queue_->delayed_tasks().HasTasks()) {
     recent_time_ = *next_delayed_work_time = TimeTicks();
     return false;
diff --git a/base/message_loop/message_loop.h b/base/message_loop/message_loop.h
index 0c82e51..46171f8 100644
--- a/base/message_loop/message_loop.h
+++ b/base/message_loop/message_loop.h
@@ -233,7 +233,7 @@
 
   // Enables nestable tasks on |loop| while in scope.
   // DEPRECATED: This should not be used when the nested loop is driven by
-  // RunLoop (use RunLoop::Type::KNestableTasksAllowed instead). It can however
+  // RunLoop (use RunLoop::Type::kNestableTasksAllowed instead). It can however
   // still be useful in a few scenarios where re-entrancy is caused by a native
   // message loop.
   // TODO(gab): Remove usage of this class alongside RunLoop and rename it to
@@ -250,8 +250,8 @@
     }
 
    private:
-    MessageLoop* loop_;
-    bool old_state_;
+    MessageLoop* const loop_;
+    const bool old_state_;
   };
 
   // A TaskObserver is an object that receives task notifications from the
@@ -333,7 +333,7 @@
   void SetThreadTaskRunnerHandle();
 
   // RunLoop::Delegate:
-  void Run() override;
+  void Run(bool application_tasks_allowed) override;
   void Quit() override;
   void EnsureWorkScheduled() override;
 
@@ -362,7 +362,7 @@
 #if defined(OS_WIN)
   // Tracks if we have requested high resolution timers. Its only use is to
   // turn off the high resolution timer upon loop destruction.
-  bool in_high_res_mode_;
+  bool in_high_res_mode_ = false;
 #endif
 
   // A recent snapshot of Time::Now(), used to check delayed_work_queue_.
@@ -370,11 +370,15 @@
 
   ObserverList<DestructionObserver> destruction_observers_;
 
-  // A recursion block that prevents accidentally running additional tasks when
-  // insider a (accidentally induced?) nested message pump. Deprecated in favor
-  // of run_loop_client_->ProcessingTasksAllowed(), equivalent until then (both
-  // need to be checked in conditionals).
-  bool nestable_tasks_allowed_;
+  // A boolean which prevents unintentional reentrant task execution (e.g. from
+  // induced nested message loops). As such, nested message loops will only
+  // process system messages (not application tasks) by default. A nested loop
+  // layer must have been explicitly granted permission to be able to execute
+  // application tasks. This is granted either by
+  // RunLoop::Type::kNestableTasksAllowed when the loop is driven by the
+  // application or by a ScopedNestableTaskAllower preceding a system call that
+  // is known to generate a system-driven nested loop.
+  bool task_execution_allowed_ = true;
 
   // pump_factory_.Run() is called to create a message pump for this loop
   // if type_ is TYPE_CUSTOM and pump_ is null.
@@ -387,7 +391,7 @@
   // meant only to store context for creating a backtrace breadcrumb. Do not
   // attach other semantics to it without thinking through the use caes
   // thoroughly.
-  const PendingTask* current_pending_task_;
+  const PendingTask* current_pending_task_ = nullptr;
 
   scoped_refptr<internal::IncomingTaskQueue> incoming_task_queue_;
 
@@ -400,7 +404,7 @@
 
   // Id of the thread this message loop is bound to. Initialized once when the
   // MessageLoop is bound to its thread and constant forever after.
-  PlatformThreadId thread_id_;
+  PlatformThreadId thread_id_ = kInvalidThreadId;
 
   // Whether task observers are allowed.
   bool allow_task_observers_ = true;
diff --git a/base/message_loop/message_loop_unittest.cc b/base/message_loop/message_loop_unittest.cc
index c01f7e2..25718c6 100644
--- a/base/message_loop/message_loop_unittest.cc
+++ b/base/message_loop/message_loop_unittest.cc
@@ -1564,6 +1564,97 @@
   RunLoop().Run();
 }
 
+TEST_P(MessageLoopTypedTest, NestableTasksAllowedAtTopLevel) {
+  MessageLoop loop(GetParam());
+  EXPECT_TRUE(MessageLoop::current()->NestableTasksAllowed());
+}
+
+// Nestable tasks shouldn't be allowed to run reentrantly by default (regression
+// test for https://crbug.com/754112).
+TEST_P(MessageLoopTypedTest, NestableTasksDisallowedByDefault) {
+  MessageLoop loop(GetParam());
+  RunLoop run_loop;
+  loop.task_runner()->PostTask(
+      FROM_HERE,
+      BindOnce(
+          [](RunLoop* run_loop) {
+            EXPECT_FALSE(MessageLoop::current()->NestableTasksAllowed());
+            run_loop->Quit();
+          },
+          Unretained(&run_loop)));
+  run_loop.Run();
+}
+
+TEST_P(MessageLoopTypedTest, NestableTasksProcessedWhenRunLoopAllows) {
+  MessageLoop loop(GetParam());
+  RunLoop run_loop;
+  loop.task_runner()->PostTask(
+      FROM_HERE,
+      BindOnce(
+          [](RunLoop* run_loop) {
+            // This test would hang if this RunLoop wasn't of type
+            // kNestableTasksAllowed (i.e. this is testing that this is
+            // processed and doesn't hang).
+            RunLoop nested_run_loop(RunLoop::Type::kNestableTasksAllowed);
+            ThreadTaskRunnerHandle::Get()->PostTask(
+                FROM_HERE,
+                BindOnce(
+                    [](RunLoop* nested_run_loop) {
+                      // Each additional layer of application task nesting
+                      // requires its own allowance. The kNestableTasksAllowed
+                      // RunLoop allowed this task to be processed but further
+                      // nestable tasks are by default disallowed from this
+                      // layer.
+                      EXPECT_FALSE(
+                          MessageLoop::current()->NestableTasksAllowed());
+                      nested_run_loop->Quit();
+                    },
+                    Unretained(&nested_run_loop)));
+            nested_run_loop.Run();
+
+            run_loop->Quit();
+          },
+          Unretained(&run_loop)));
+  run_loop.Run();
+}
+
+TEST_P(MessageLoopTypedTest, NestableTasksAllowedExplicitlyInScope) {
+  MessageLoop loop(GetParam());
+  RunLoop run_loop;
+  loop.task_runner()->PostTask(
+      FROM_HERE,
+      BindOnce(
+          [](RunLoop* run_loop) {
+            {
+              MessageLoop::ScopedNestableTaskAllower allow_nestable_tasks(
+                  MessageLoop::current());
+              EXPECT_TRUE(MessageLoop::current()->NestableTasksAllowed());
+            }
+            EXPECT_FALSE(MessageLoop::current()->NestableTasksAllowed());
+            run_loop->Quit();
+          },
+          Unretained(&run_loop)));
+  run_loop.Run();
+}
+
+TEST_P(MessageLoopTypedTest, NestableTasksAllowedManually) {
+  MessageLoop loop(GetParam());
+  RunLoop run_loop;
+  loop.task_runner()->PostTask(
+      FROM_HERE,
+      BindOnce(
+          [](RunLoop* run_loop) {
+            EXPECT_FALSE(MessageLoop::current()->NestableTasksAllowed());
+            MessageLoop::current()->SetNestableTasksAllowed(true);
+            EXPECT_TRUE(MessageLoop::current()->NestableTasksAllowed());
+            MessageLoop::current()->SetNestableTasksAllowed(false);
+            EXPECT_FALSE(MessageLoop::current()->NestableTasksAllowed());
+            run_loop->Quit();
+          },
+          Unretained(&run_loop)));
+  run_loop.Run();
+}
+
 INSTANTIATE_TEST_CASE_P(,
                         MessageLoopTypedTest,
                         ::testing::Values(MessageLoop::TYPE_DEFAULT,
diff --git a/base/run_loop.cc b/base/run_loop.cc
index 0658143..61230c6 100644
--- a/base/run_loop.cc
+++ b/base/run_loop.cc
@@ -59,14 +59,6 @@
   return outer_->active_run_loops_.size() > 1;
 }
 
-bool RunLoop::Delegate::Client::ProcessingTasksAllowed() const {
-  DCHECK_CALLED_ON_VALID_THREAD(outer_->bound_thread_checker_);
-  DCHECK(outer_->bound_);
-  DCHECK(!outer_->active_run_loops_.empty());
-  return outer_->active_run_loops_.size() == 1U ||
-         outer_->active_run_loops_.top()->type_ == Type::kNestableTasksAllowed;
-}
-
 RunLoop::Delegate::Client::Client(Delegate* outer) : outer_(outer) {}
 
 // static
@@ -115,7 +107,11 @@
   // multiple sequences is still disallowed).
   DETACH_FROM_SEQUENCE(sequence_checker_);
 
-  delegate_->Run();
+  DCHECK_EQ(this, delegate_->active_run_loops_.top());
+  const bool application_tasks_allowed =
+      delegate_->active_run_loops_.size() == 1U ||
+      type_ == Type::kNestableTasksAllowed;
+  delegate_->Run(application_tasks_allowed);
 
   // Rebind this RunLoop to the current thread after Run().
   DETACH_FROM_SEQUENCE(sequence_checker_);
diff --git a/base/run_loop.h b/base/run_loop.h
index a4eac1a..7cf72db 100644
--- a/base/run_loop.h
+++ b/base/run_loop.h
@@ -175,12 +175,6 @@
       // interface.
       bool IsNested() const;
 
-      // Returns true if the Delegate is allowed to process application tasks.
-      // This typically returns true except in nested RunLoops outside the scope
-      // of a ScopedNestableTaskAllowed as, by default, nested RunLoops are only
-      // meant to process system events.
-      bool ProcessingTasksAllowed() const;
-
      private:
       // Only a Delegate can instantiate a Delegate::Client.
       friend class Delegate;
@@ -201,11 +195,12 @@
     // remaining tasks/messages. Run() calls can nest in which case each Quit()
     // call should result in the topmost active Run() call returning. The only
     // other trigger for Run() to return is Client::ShouldQuitWhenIdle() which
-    // the Delegate should probe before sleeping when it becomes idle. Run()
-    // implementations should also check Client::ProcessingTasksAllowed() before
-    // processing assigned application tasks (they should only process system
-    // tasks otherwise).
-    virtual void Run() = 0;
+    // the Delegate should probe before sleeping when it becomes idle.
+    // |application_tasks_allowed| is true if this is the first Run() call on
+    // the stack or it was made from a nested RunLoop of
+    // Type::kNestableTasksAllowed (otherwise this Run() level should only
+    // process system tasks).
+    virtual void Run(bool application_tasks_allowed) = 0;
     virtual void Quit() = 0;
 
     // Invoked right before a RunLoop enters a nested Run() call on this
diff --git a/base/run_loop_unittest.cc b/base/run_loop_unittest.cc
index cc36732..beebda3 100644
--- a/base/run_loop_unittest.cc
+++ b/base/run_loop_unittest.cc
@@ -136,20 +136,18 @@
   }
 
  private:
-  void Run() override {
+  void Run(bool application_tasks_allowed) override {
     if (nested_run_allowing_tasks_incoming_) {
       EXPECT_TRUE(run_loop_client_->IsNested());
-      EXPECT_TRUE(run_loop_client_->ProcessingTasksAllowed());
+      EXPECT_TRUE(application_tasks_allowed);
     } else if (run_loop_client_->IsNested()) {
-      EXPECT_FALSE(run_loop_client_->ProcessingTasksAllowed());
+      EXPECT_FALSE(application_tasks_allowed);
     }
     nested_run_allowing_tasks_incoming_ = false;
 
     while (!should_quit_) {
-      if (run_loop_client_->ProcessingTasksAllowed() &&
-          simple_task_runner_->ProcessTask()) {
+      if (application_tasks_allowed && simple_task_runner_->ProcessTask())
         continue;
-      }
 
       if (run_loop_client_->ShouldQuitWhenIdle())
         break;
diff --git a/base/test/test_mock_time_task_runner.cc b/base/test/test_mock_time_task_runner.cc
index 4be40a1..86cebb0 100644
--- a/base/test/test_mock_time_task_runner.cc
+++ b/base/test/test_mock_time_task_runner.cc
@@ -372,16 +372,16 @@
   return false;
 }
 
-void TestMockTimeTaskRunner::Run() {
+void TestMockTimeTaskRunner::Run(bool application_tasks_allowed) {
   DCHECK(thread_checker_.CalledOnValidThread());
 
   // Since TestMockTimeTaskRunner doesn't process system messages: there's no
-  // hope for anything but a chrome task to call Quit(). If this RunLoop can't
-  // process chrome tasks (i.e. disallowed by default in nested RunLoops), it's
-  // thereby guaranteed to hang...
-  DCHECK(run_loop_client_->ProcessingTasksAllowed())
+  // hope for anything but an application task to call Quit(). If this RunLoop
+  // can't process application tasks (i.e. disallowed by default in nested
+  // RunLoops) it's guaranteed to hang...
+  DCHECK(application_tasks_allowed)
       << "This is a nested RunLoop instance and needs to be of "
-         "Type::NESTABLE_TASKS_ALLOWED.";
+         "Type::kNestableTasksAllowed.";
 
   while (!quit_run_loop_) {
     RunUntilIdle();
diff --git a/base/test/test_mock_time_task_runner.h b/base/test/test_mock_time_task_runner.h
index ed6c9b7..1fe9809 100644
--- a/base/test/test_mock_time_task_runner.h
+++ b/base/test/test_mock_time_task_runner.h
@@ -227,7 +227,7 @@
                        TestPendingTask* next_task);
 
   // RunLoop::Delegate:
-  void Run() override;
+  void Run(bool application_tasks_allowed) override;
   void Quit() override;
   void EnsureWorkScheduled() override;
 
--- a/chrome/browser/ui/cocoa/extensions/extension_uninstall_dialog_cocoa.mm
+++ b/chrome/browser/ui/cocoa/extensions/extension_uninstall_dialog_cocoa.mm
@@ -9,6 +9,7 @@
 #include <string>
 
 #import "base/mac/scoped_nsobject.h"
+#include "base/message_loop/message_loop.h"
 #import "base/strings/sys_string_conversions.h"
 #include "base/strings/utf_string_conversions.h"
 #include "chrome/grit/generated_resources.h"
@@ -69,7 +70,13 @@
     [alert setAccessoryView:reportAbuseCheckbox];
   }
 
-  if ([alert runModal] == NSAlertFirstButtonReturn) {
+  NSModalResponse response;
+  {
+    base::MessageLoop::ScopedNestableTaskAllower allow_nested(
+        base::MessageLoop::current());
+    response = [alert runModal];
+  }
+  if (response == NSAlertFirstButtonReturn) {
     bool report_abuse_checked =
         reportAbuseCheckbox.get() && [reportAbuseCheckbox state] == NSOnState;
     OnDialogClosed(report_abuse_checked ?
--- a/chrome/browser/extensions/navigation_observer.cc
+++ b/chrome/browser/extensions/navigation_observer.cc
@@ -69,15 +69,7 @@
   if (!nav_entry)
     return;
 
-  // With a disabled extension, the navigation is blocked, which results in
-  // an error page and NavigationEntry with "about:blank" URL. In this case,
-  // the virtual URL is the real URL the user navigated to, so if this is the
-  // case, use it instead.
-  const GURL& url = (nav_entry->GetPageType() == content::PAGE_TYPE_ERROR &&
-                     nav_entry->GetURL() == url::kAboutBlankURL &&
-                     nav_entry->GetVirtualURL().SchemeIs(kExtensionScheme))
-                        ? nav_entry->GetVirtualURL()
-                        : nav_entry->GetURL();
+  const GURL& url = nav_entry->GetURL();
 
   // NOTE: We only consider chrome-extension:// urls, and deliberately don't
   // consider hosted app urls. This is because it's really annoying to visit the
diff --git a/content/browser/frame_host/data_url_navigation_browsertest.cc b/content/browser/frame_host/data_url_navigation_browsertest.cc
index 7d48a94..036e791 100644
--- a/content/browser/frame_host/data_url_navigation_browsertest.cc
+++ b/content/browser/frame_host/data_url_navigation_browsertest.cc
@@ -976,19 +976,17 @@
   WaitForLoadStop(new_shell->web_contents());
 
   // The window.open() should have resulted in an error page. The blocked
-  // URL should be in the virtual URL, not the actual URL.
-  //
-  // TODO(nasko): Now that the error commits on the previous URL, the blocked
-  // navigation logic is no longer needed. https://crbug.com/723796
+  // URL should be in both the actual and the virtual URL.
   {
     EXPECT_EQ(0, controller->GetLastCommittedEntryIndex());
     NavigationEntry* entry = controller->GetLastCommittedEntry();
     EXPECT_EQ(PAGE_TYPE_ERROR, entry->GetPageType());
     EXPECT_FALSE(entry->GetURL().SchemeIs(url::kDataScheme));
     EXPECT_TRUE(base::StartsWith(
-        entry->GetVirtualURL().spec(),
+        entry->GetURL().spec(),
         embedded_test_server()->GetURL("/server-redirect?").spec(),
         base::CompareCase::SENSITIVE));
+    EXPECT_EQ(entry->GetURL(), entry->GetVirtualURL());
   }
 
   // Navigate forward and then go back to ensure the navigation to data: URL
@@ -1006,10 +1004,10 @@
     EXPECT_EQ(0, controller->GetLastCommittedEntryIndex());
     EXPECT_FALSE(entry->GetURL().SchemeIs(url::kDataScheme));
     EXPECT_TRUE(base::StartsWith(
-        entry->GetVirtualURL().spec(),
+        entry->GetURL().spec(),
         embedded_test_server()->GetURL("/server-redirect?").spec(),
         base::CompareCase::SENSITIVE));
-    EXPECT_EQ(url::kAboutBlankURL, entry->GetURL().spec());
+    EXPECT_EQ(entry->GetURL(), entry->GetVirtualURL());
   }
 
   // Do another new navigation, but then use JavaScript to navigate back,
@@ -1026,10 +1024,10 @@
     EXPECT_EQ(0, controller->GetLastCommittedEntryIndex());
     EXPECT_FALSE(entry->GetURL().SchemeIs(url::kDataScheme));
     EXPECT_TRUE(base::StartsWith(
-        entry->GetVirtualURL().spec(),
+        entry->GetURL().spec(),
         embedded_test_server()->GetURL("/server-redirect?").spec(),
         base::CompareCase::SENSITIVE));
-    EXPECT_EQ(url::kAboutBlankURL, entry->GetURL().spec());
+    EXPECT_EQ(entry->GetURL(), entry->GetVirtualURL());
   }
 }
 
diff --git a/content/browser/frame_host/navigation_controller_impl.cc b/content/browser/frame_host/navigation_controller_impl.cc
index b9a2001..bebde46 100644
--- a/content/browser/frame_host/navigation_controller_impl.cc
+++ b/content/browser/frame_host/navigation_controller_impl.cc
@@ -159,26 +159,6 @@
   return false;
 }
 
-// Returns true if the error code indicates an error condition that is not
-// recoverable or navigation is blocked. In such cases, session history
-// navigations to the same NavigationEntry should not attempt to load the
-// original URL.
-// TODO(nasko): Find a better way to distinguish blocked vs failed navigations,
-// as this is a very hacky way of accomplishing this. For now, a handful of
-// error codes are considered, which are more or less known to be cases of
-// blocked navigations.
-bool IsBlockedNavigation(net::Error error_code) {
-  switch (error_code) {
-    case net::ERR_BLOCKED_BY_CLIENT:
-    case net::ERR_BLOCKED_BY_RESPONSE:
-    case net::ERR_BLOCKED_BY_XSS_AUDITOR:
-    case net::ERR_UNSAFE_REDIRECT:
-      return true;
-    default:
-      return false;
-  }
-}
-
 }  // namespace
 
 // NavigationControllerImpl ----------------------------------------------------
@@ -952,24 +932,6 @@
     frame_entry->set_redirect_chain(params.redirects);
   }
 
-  // When a navigation in the main frame is blocked, it will display an error
-  // page. To avoid loading the blocked URL on back/forward navigations,
-  // do not store it in the FrameNavigationEntry's URL or PageState. Instead,
-  // make it visible to the user as the virtual URL. Store a safe URL
-  // (about:blank) as the one to load if the entry is revisited.
-  // TODO(nasko): Consider supporting similar behavior for subframe
-  // navigations, including AUTO_SUBFRAME.
-  if (!rfh->GetParent() &&
-      IsBlockedNavigation(navigation_handle->GetNetErrorCode())) {
-    DCHECK(params.url_is_unreachable);
-    active_entry->SetURL(GURL(url::kAboutBlankURL));
-    active_entry->SetVirtualURL(params.url);
-    if (frame_entry) {
-      frame_entry->SetPageState(
-          PageState::CreateFromURL(active_entry->GetURL()));
-    }
-  }
-
   // Use histogram to track memory impact of redirect chain because it's now
   // not cleared for committed entries.
   size_t redirect_chain_size = 0;
diff --git a/content/browser/frame_host/navigation_controller_impl_browsertest.cc b/content/browser/frame_host/navigation_controller_impl_browsertest.cc
index 58b5246..b37577a 100644
--- a/content/browser/frame_host/navigation_controller_impl_browsertest.cc
+++ b/content/browser/frame_host/navigation_controller_impl_browsertest.cc
@@ -6920,18 +6920,79 @@
   controller.GoBack();
   back_load_observer.Wait();
 
-  // The expectation is that about:blank was loaded and the virtual URL is set
-  // to the URL that was blocked.
-  //
-  // TODO(nasko): Now that the error commits on the previous URL, the blocked
-  // navigation logic is no longer needed. https://crbug.com/723796
+  // The expectation is that the blocked URL is present in the NavigationEntry,
+  // and shows up in both GetURL and GetVirtualURL.
   EXPECT_EQ(1, controller.GetLastCommittedEntryIndex());
   EXPECT_FALSE(
       controller.GetLastCommittedEntry()->GetURL().SchemeIs(url::kDataScheme));
   EXPECT_EQ(redirect_to_unsafe_url,
+            controller.GetLastCommittedEntry()->GetURL());
+  EXPECT_EQ(redirect_to_unsafe_url,
             controller.GetLastCommittedEntry()->GetVirtualURL());
-  EXPECT_EQ(url::kAboutBlankURL,
-            controller.GetLastCommittedEntry()->GetURL().spec());
+}
+
+// Verifies that redirecting to a blocked URL and going back does not allow a
+// URL spoof.  See https://crbug.com/777419.
+IN_PROC_BROWSER_TEST_F(NavigationControllerBrowserTest,
+                       PreventSpoofFromBlockedRedirect) {
+  GURL url1 = embedded_test_server()->GetURL(
+      "a.com", "/navigation_controller/simple_page_1.html");
+  EXPECT_TRUE(NavigateToURL(shell(), url1));
+  FrameTreeNode* root = static_cast<WebContentsImpl*>(shell()->web_contents())
+                            ->GetFrameTree()
+                            ->root();
+
+  // Pop open a new window.
+  ShellAddedObserver new_shell_observer;
+  EXPECT_TRUE(ExecuteScript(root, "var w = window.open()"));
+  Shell* new_shell = new_shell_observer.GetShell();
+  ASSERT_NE(new_shell->web_contents(), shell()->web_contents());
+  EXPECT_FALSE(
+      new_shell->web_contents()->GetController().GetLastCommittedEntry());
+
+  // Navigate it to a cross-site URL that redirects to a data: URL.  Since it is
+  // an unsafe redirect, it will result in a blocked navigation and error page.
+  GURL redirect_to_data_url(
+      embedded_test_server()->GetURL("/server-redirect?data:text/html,Hello!"));
+  TestNavigationObserver nav_observer(new_shell->web_contents(), 1);
+  EXPECT_TRUE(ExecuteScript(
+      root, "w.location.href = '" + redirect_to_data_url.spec() + "';"));
+  nav_observer.WaitForNavigationFinished();
+  EXPECT_FALSE(nav_observer.last_navigation_succeeded());
+  NavigationControllerImpl& controller = static_cast<NavigationControllerImpl&>(
+      new_shell->web_contents()->GetController());
+  EXPECT_EQ(0, controller.GetLastCommittedEntryIndex());
+  EXPECT_EQ(redirect_to_data_url, controller.GetLastCommittedEntry()->GetURL());
+  EXPECT_EQ(PAGE_TYPE_ERROR, controller.GetLastCommittedEntry()->GetPageType());
+
+  // Navigate to a new document, then go back in history trying to load the
+  // blocked URL.
+  EXPECT_TRUE(NavigateToURL(new_shell, url1));
+  EXPECT_EQ(1, controller.GetLastCommittedEntryIndex());
+  EXPECT_EQ(url1, controller.GetLastCommittedEntry()->GetURL());
+  TestNavigationObserver back_load_observer(new_shell->web_contents());
+  controller.GoBack();
+  back_load_observer.Wait();
+  EXPECT_EQ(redirect_to_data_url, controller.GetLastCommittedEntry()->GetURL());
+
+  // The opener should not be able to script the page, which should be another
+  // error message and not a blank page.
+  std::string result;
+  EXPECT_TRUE(ExecuteScriptAndExtractString(
+      shell(),
+      "domAutomationController.send((function() {\n"
+      "  try {\n"
+      "    return w.document.body.innerHTML;\n"
+      "  } catch (e) {\n"
+      "    return e.toString();\n"
+      "  }\n"
+      "})())",
+      &result));
+  DLOG(INFO) << "Result: " << result;
+  EXPECT_THAT(result,
+              ::testing::MatchesRegex("SecurityError: Blocked a frame with "
+                                      "origin \"http://a.com:\\d+\" from "
+                                      "accessing a cross-origin frame."));
 }
 
 // Same-document navigations can sometimes succeed but then later be blocked by
diff --git a/content/browser/frame_host/navigation_handle_impl_browsertest.cc b/content/browser/frame_host/navigation_handle_impl_browsertest.cc
index 54daeb4..d8584dd 100644
--- a/content/browser/frame_host/navigation_handle_impl_browsertest.cc
+++ b/content/browser/frame_host/navigation_handle_impl_browsertest.cc
@@ -1428,18 +1428,36 @@
   }
 
   {
-    // Reloading the blocked document should load about:blank and not transfer
-    // processes.
-    GURL about_blank_url(url::kAboutBlankURL);
-    NavigationHandleObserver observer(shell()->web_contents(), about_blank_url);
+    // Reloading the blocked document from the renderer process should not
+    // transfer processes.
+    NavigationHandleObserver observer(shell()->web_contents(), blocked_url);
+    TestNavigationObserver navigation_observer(shell()->web_contents(), 1);
+
+    EXPECT_TRUE(ExecuteScript(shell(), "location.reload()"));
+    navigation_observer.Wait();
+    EXPECT_TRUE(observer.has_committed());
+    EXPECT_TRUE(observer.is_error());
+    EXPECT_EQ(site_instance,
+              shell()->web_contents()->GetMainFrame()->GetSiteInstance());
+  }
+
+  {
+    // Reloading the blocked document from the browser process ends up
+    // transferring processes in --site-per-process.
+    NavigationHandleObserver observer(shell()->web_contents(), blocked_url);
     TestNavigationObserver navigation_observer(shell()->web_contents(), 1);
 
     shell()->Reload();
     navigation_observer.Wait();
     EXPECT_TRUE(observer.has_committed());
-    EXPECT_FALSE(observer.is_error());
-    EXPECT_EQ(site_instance,
-              shell()->web_contents()->GetMainFrame()->GetSiteInstance());
+    EXPECT_TRUE(observer.is_error());
+    if (AreAllSitesIsolatedForTesting()) {
+      EXPECT_NE(site_instance,
+                shell()->web_contents()->GetMainFrame()->GetSiteInstance());
+    } else {
+      EXPECT_EQ(site_instance,
+                shell()->web_contents()->GetMainFrame()->GetSiteInstance());
+    }
   }
 
   installer.reset();
