--- a/components/password_manager/core/browser/hash_password_manager.cc
+++ b/components/password_manager/core/browser/hash_password_manager.cc
@@ -24,6 +24,16 @@
   if (!prefs_)
     return false;
 
+  base::Optional<SyncPasswordData> current_sync_password_data =
+      RetrievePasswordHash();
+  // If it is the same password, no need to save password hash again.
+  if (current_sync_password_data.has_value() &&
+      password_manager_util::CalculateSyncPasswordHash(
+          password, current_sync_password_data->salt) ==
+          current_sync_password_data->hash) {
+    return true;
+  }
+
   std::string salt = CreateRandomSalt();
   std::string hash = base::Uint64ToString(
       password_manager_util::CalculateSyncPasswordHash(password, salt));
diff --git a/components/password_manager/core/browser/hash_password_manager_unittest.cc b/components/password_manager/core/browser/hash_password_manager_unittest.cc
index 7c43140..74559c5 100644
--- a/components/password_manager/core/browser/hash_password_manager_unittest.cc
+++ b/components/password_manager/core/browser/hash_password_manager_unittest.cc
@@ -41,6 +41,15 @@
   hash_password_manager.set_prefs(&prefs_);
   hash_password_manager.SavePasswordHash(base::ASCIIToUTF16("sync_password"));
   EXPECT_TRUE(prefs_.HasPrefPath(prefs::kSyncPasswordHash));
+
+  // Saves the same password again won't change password hash, length or salt.
+  const std::string current_hash = prefs_.GetString(prefs::kSyncPasswordHash);
+  const std::string current_length_and_salt =
+      prefs_.GetString(prefs::kSyncPasswordLengthAndHashSalt);
+  hash_password_manager.SavePasswordHash(base::ASCIIToUTF16("sync_password"));
+  EXPECT_EQ(current_hash, prefs_.GetString(prefs::kSyncPasswordHash));
+  EXPECT_EQ(current_length_and_salt,
+            prefs_.GetString(prefs::kSyncPasswordLengthAndHashSalt));
 }
 
 TEST_F(HashPasswordManagerTest, Clearing) {
--- a/third_party/WebKit/Source/core/paint/ObjectPaintInvalidator.cpp
+++ b/third_party/WebKit/Source/core/paint/ObjectPaintInvalidator.cpp
@@ -515,10 +515,8 @@
   // or shouldInvalidationSelection is set (in case that the selection itself
   // changed).
   bool full_invalidation = IsImmediateFullPaintInvalidationReason(reason);
-  if (!full_invalidation && !object_.ShouldInvalidateSelection()) {
-    object_.GetMutableForPainting().SetSelectionVisualRect(LayoutRect());
+  if (!full_invalidation && !object_.ShouldInvalidateSelection())
     return;
-  }
 
   LayoutRect old_selection_rect = object_.SelectionVisualRect();
   LayoutRect new_selection_rect;
diff --git a/third_party/WebKit/Source/core/paint/ObjectPaintInvalidatorTest.cpp b/third_party/WebKit/Source/core/paint/ObjectPaintInvalidatorTest.cpp
index c181fd0..dcfe7187 100644
--- a/third_party/WebKit/Source/core/paint/ObjectPaintInvalidatorTest.cpp
+++ b/third_party/WebKit/Source/core/paint/ObjectPaintInvalidatorTest.cpp
@@ -4,6 +4,7 @@
 
 #include "core/paint/ObjectPaintInvalidator.h"
 
+#include "core/editing/FrameSelection.h"
 #include "core/layout/LayoutObject.h"
 #include "core/layout/LayoutTestHelper.h"
 #include "core/paint/PaintLayer.h"
@@ -304,4 +305,46 @@
   GetDocument().View()->SetTracksPaintInvalidations(false);
 }
 
+TEST_F(ObjectPaintInvalidatorTest, Selection) {
+  EnableCompositing();
+  SetBodyInnerHTML("<img id='target' style='width: 100px; height: 100px'>");
+  auto* target = GetLayoutObjectByElementId("target");
+  EXPECT_EQ(LayoutRect(), target->SelectionVisualRect());
+
+  // Add selection.
+  GetDocument().View()->SetTracksPaintInvalidations(true);
+  GetDocument().GetFrame()->Selection().SelectAll();
+  GetDocument().View()->UpdateAllLifecyclePhases();
+  const auto* graphics_layer = GetLayoutView().Layer()->GraphicsLayerBacking();
+  const auto* invalidations =
+      &graphics_layer->GetRasterInvalidationTracking()->Invalidations();
+  ASSERT_EQ(1u, invalidations->size());
+  EXPECT_EQ(IntRect(8, 8, 100, 100), (*invalidations)[0].rect);
+  EXPECT_EQ(PaintInvalidationReason::kSelection, (*invalidations)[0].reason);
+  EXPECT_EQ(LayoutRect(8, 8, 100, 100), target->SelectionVisualRect());
+  GetDocument().View()->SetTracksPaintInvalidations(false);
+
+  // Simulate a change without full invalidation or selection change.
+  GetDocument().View()->SetTracksPaintInvalidations(true);
+  target->SetMayNeedPaintInvalidation();
+  GetDocument().View()->UpdateAllLifecyclePhases();
+  EXPECT_TRUE(graphics_layer->GetRasterInvalidationTracking()
+                  ->Invalidations()
+                  .IsEmpty());
+  EXPECT_EQ(LayoutRect(8, 8, 100, 100), target->SelectionVisualRect());
+  GetDocument().View()->SetTracksPaintInvalidations(false);
+
+  // Remove selection.
+  GetDocument().View()->SetTracksPaintInvalidations(true);
+  GetDocument().GetFrame()->Selection().Clear();
+  GetDocument().View()->UpdateAllLifecyclePhases();
+  invalidations =
+      &graphics_layer->GetRasterInvalidationTracking()->Invalidations();
+  ASSERT_EQ(1u, invalidations->size());
+  EXPECT_EQ(IntRect(8, 8, 100, 100), (*invalidations)[0].rect);
+  EXPECT_EQ(PaintInvalidationReason::kSelection, (*invalidations)[0].reason);
+  EXPECT_EQ(LayoutRect(), target->SelectionVisualRect());
+  GetDocument().View()->SetTracksPaintInvalidations(false);
+}
+
 }  // namespace blink
--- a/components/password_manager/core/browser/password_form_manager.cc
+++ b/components/password_manager/core/browser/password_form_manager.cc
@@ -649,6 +649,12 @@
 void PasswordFormManager::ProcessFrame(
     const base::WeakPtr<PasswordManagerDriver>& driver) {
   DCHECK_EQ(PasswordForm::SCHEME_HTML, observed_form_.scheme);
+
+  // Don't keep processing the same form.
+  if (autofills_left_ <= 0)
+    return;
+  autofills_left_--;
+
   if (form_fetcher_->GetState() == FormFetcher::State::NOT_WAITING)
     ProcessFrameInternal(driver);
 
diff --git a/components/password_manager/core/browser/password_form_manager.h b/components/password_manager/core/browser/password_form_manager.h
index 3b9e3f0..1b0ab1b 100644
--- a/components/password_manager/core/browser/password_form_manager.h
+++ b/components/password_manager/core/browser/password_form_manager.h
@@ -95,6 +95,10 @@
     IGNORE_OTHER_POSSIBLE_USERNAMES
   };
 
+  // The upper limit on how many times Chrome will try to autofill the same
+  // form.
+  static constexpr int kMaxTimesAutofill = 5;
+
   // Chooses between the current and new password value which one to save. This
   // is whichever is non-empty, with the preference being given to the new one.
   static base::string16 PasswordToSave(const autofill::PasswordForm& form);
@@ -598,6 +602,12 @@
   // forms.
   bool blacklisted_origin_found_ = false;
 
+  // If Chrome has already autofilled a few times, it is probable that autofill
+  // is triggered by programmatic changes in the page. We set a maximum number
+  // of times that Chrome will autofill to avoid being stuck in an infinite
+  // loop.
+  int autofills_left_ = kMaxTimesAutofill;
+
   DISALLOW_COPY_AND_ASSIGN(PasswordFormManager);
 };
 
diff --git a/components/password_manager/core/browser/password_form_manager_unittest.cc b/components/password_manager/core/browser/password_form_manager_unittest.cc
index 95410aa..9b84089 100644
--- a/components/password_manager/core/browser/password_form_manager_unittest.cc
+++ b/components/password_manager/core/browser/password_form_manager_unittest.cc
@@ -2594,6 +2594,20 @@
   form_manager()->ProcessFrame(client()->mock_driver()->AsWeakPtr());
 }
 
+// Test that Chrome stops autofilling if triggered too many times.
+TEST_F(PasswordFormManagerTest, ProcessFrame_MaxTimes) {
+  constexpr int kMaxAutofills = PasswordFormManager::kMaxTimesAutofill;
+  constexpr int kExtraProcessRequests = 3;
+  // Expect one call for each ProcessFrame() and one for SetNonFederated().
+  EXPECT_CALL(*client()->mock_driver(), FillPasswordForm(_))
+      .Times(kMaxAutofills + 1);
+  fake_form_fetcher()->SetNonFederated({saved_match()}, 0u);
+  // Process more times to exceed the limit.
+  for (int i = 0; i < kMaxAutofills + kExtraProcessRequests; i++) {
+    form_manager()->ProcessFrame(client()->mock_driver()->AsWeakPtr());
+  }
+}
+
 // Test that when ProcessFrame is called on a driver added after receiving
 // matches, such driver is still told to call FillPasswordForm.
 TEST_F(PasswordFormManagerTest, ProcessFrame_TwoDrivers) {
--- a/chrome/browser/resources/settings/bluetooth_page/bluetooth_page.js
+++ b/chrome/browser/resources/settings/bluetooth_page/bluetooth_page.js
@@ -168,7 +168,6 @@
     this.adapterState_ = state;
     this.bluetoothToggleState_ = state.powered;
     this.bluetoothToggleDisabled_ = !state.available;
-    this.setPrefValue('ash.user.bluetooth.adapter_enabled', state.powered);
   },
 
   /** @private */
@@ -206,12 +205,15 @@
     }
     this.bluetoothToggleDisabled_ = true;
     this.bluetoothPrivate.setAdapterState(
-        {powered: this.bluetoothToggleState_}, function() {
+        {powered: this.bluetoothToggleState_}, () => {
           if (chrome.runtime.lastError) {
             console.error(
                 'Error enabling bluetooth: ' +
                 chrome.runtime.lastError.message);
           }
+          this.setPrefValue(
+              'ash.user.bluetooth.adapter_enabled',
+              this.bluetoothToggleState_);
         });
   },
 
--- a/ios/web/public/test/fakes/test_web_state.h
+++ b/ios/web/public/test/fakes/test_web_state.h
@@ -81,6 +81,7 @@
   void RemovePolicyDecider(WebStatePolicyDecider* decider) override {}
   WebStateInterfaceProvider* GetWebStateInterfaceProvider() override;
   bool HasOpener() const override;
+  void SetHasOpener(bool has_opener) override;
   void TakeSnapshot(const SnapshotCallback& callback,
                     CGSize target_size) const override;
   base::WeakPtr<WebState> AsWeakPtr() override;
@@ -113,6 +114,7 @@
   bool is_visible_;
   bool is_crashed_;
   bool is_evicted_;
+  bool has_opener_;
   CRWContentView* transient_content_view_;
   GURL url_;
   base::string16 title_;
diff --git a/ios/web/public/test/fakes/test_web_state.mm b/ios/web/public/test/fakes/test_web_state.mm
index cbe3ac7a..f57ea17 100644
--- a/ios/web/public/test/fakes/test_web_state.mm
+++ b/ios/web/public/test/fakes/test_web_state.mm
@@ -34,6 +34,7 @@
       is_visible_(false),
       is_crashed_(false),
       is_evicted_(false),
+      has_opener_(false),
       trust_level_(kAbsolute),
       content_is_html_(true) {}
 
@@ -272,7 +273,11 @@
 }
 
 bool TestWebState::HasOpener() const {
-  return false;
+  return has_opener_;
+}
+
+void TestWebState::SetHasOpener(bool has_opener) {
+  has_opener_ = has_opener;
 }
 
 void TestWebState::TakeSnapshot(const SnapshotCallback& callback,
diff --git a/ios/web/public/web_state/web_state.h b/ios/web/public/web_state/web_state.h
index a2649f3..5d00697 100644
--- a/ios/web/public/web_state/web_state.h
+++ b/ios/web/public/web_state/web_state.h
@@ -288,9 +288,10 @@
                                       std::move(request.PassMessagePipe()));
   }
 
-  // Returns whether this WebState was created with an opener.  See
-  // CreateParams::created_with_opener for more details.
+  // Whether this WebState was created with an opener.
+  // See CreateParams::created_with_opener for more details.
   virtual bool HasOpener() const = 0;
+  virtual void SetHasOpener(bool has_opener) = 0;
 
   // Callback used to handle snapshots. The parameter is the snapshot image.
   typedef base::Callback<void(const gfx::Image&)> SnapshotCallback;
diff --git a/ios/web/web_state/web_state_impl.h b/ios/web/web_state/web_state_impl.h
index c50022f..9709b47 100644
--- a/ios/web/web_state/web_state_impl.h
+++ b/ios/web/web_state/web_state_impl.h
@@ -231,6 +231,7 @@
       const std::string& interface_name,
       mojo::ScopedMessagePipeHandle interface_pipe) override;
   bool HasOpener() const override;
+  void SetHasOpener(bool has_opener) override;
   void TakeSnapshot(const SnapshotCallback& callback,
                     CGSize target_size) const override;
   base::WeakPtr<WebState> AsWeakPtr() override;
diff --git a/ios/web/web_state/web_state_impl.mm b/ios/web/web_state/web_state_impl.mm
index d9f6f0c..934828d 100644
--- a/ios/web/web_state/web_state_impl.mm
+++ b/ios/web/web_state/web_state_impl.mm
@@ -707,6 +707,10 @@
   return created_with_opener_;
 }
 
+void WebStateImpl::SetHasOpener(bool has_opener) {
+  created_with_opener_ = has_opener;
+}
+
 void WebStateImpl::TakeSnapshot(const SnapshotCallback& callback,
                                 CGSize target_size) const {
   UIView* view = [web_controller_ view];
diff --git a/ios/web/web_state/web_state_unittest.mm b/ios/web/web_state/web_state_unittest.mm
index 118cee7..729a5c5 100644
--- a/ios/web/web_state/web_state_unittest.mm
+++ b/ios/web/web_state/web_state_unittest.mm
@@ -174,4 +174,11 @@
   });
 }
 
+// Tests that the web state has an opener after calling SetHasOpener().
+TEST_F(WebStateTest, SetHasOpener) {
+  ASSERT_FALSE(web_state()->HasOpener());
+  web_state()->SetHasOpener(true);
+  EXPECT_TRUE(web_state()->HasOpener());
+}
+
 }  // namespace web
diff --git a/ios/web_view/internal/cwv_web_view.mm b/ios/web_view/internal/cwv_web_view.mm
index a33a07a..9f57548 100644
--- a/ios/web_view/internal/cwv_web_view.mm
+++ b/ios/web_view/internal/cwv_web_view.mm
@@ -310,14 +310,15 @@
   CWVNavigationAction* navigationAction =
       [[CWVNavigationAction alloc] initWithRequest:request
                                      userInitiated:initiatedByUser];
-  // TODO(crbug.com/702298): Window created by CWVUIDelegate should be closable.
   CWVWebView* webView = [_UIDelegate webView:self
               createWebViewWithConfiguration:_configuration
                          forNavigationAction:navigationAction];
   if (!webView) {
     return nullptr;
   }
-  return webView->_webState.get();
+  web::WebState* webViewWebState = webView->_webState.get();
+  webViewWebState->SetHasOpener(true);
+  return webViewWebState;
 }
 
 - (void)closeWebState:(web::WebState*)webState {
